{"version":3,"sources":["theme.js","routes.js","components/Bar/index.js","App/styles.js","serviceWorker.js","index.js","App/index.js"],"names":["defaultTheme","createMuiTheme","palette","background","main","primary","light","dark","secondary","home","lazy","fallback","exact","path","component","styles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","index","classes","className","AppBar","position","Toolbar","Typography","variant","GlobalStyle","createGlobalStyle","Container","styled","Grid","Boolean","window","location","hostname","match","ReactDOM","render","CssBaseline","ThemeProvider","responsiveFontSizes","container","direction","justify","id","item","xs","sm","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAEMA,EAAeC,cAENA,gBAAe,eACvBD,EADsB,CAEzBE,QAAS,CACLC,WAAW,CACPC,KAAM,WAEVC,QAAS,CACLD,KAAM,UACNE,MAAO,UACPC,KAAM,WAEVC,UAAW,CACPJ,KAAM,UACNE,MAAO,UACPC,KAAM,gB,6KCfZE,EAAOC,gBAAK,kBAAM,uDAET,oBACX,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,SAAU,+BAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,Q,gCCJ3CM,EAASC,aAAW,SAAAC,GAAK,MAAK,CAChCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAID,SAASK,IACpB,IAAMC,EAAUV,IAEhB,OACI,yBAAKW,UAAWD,EAAQP,MACpB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,oB,mTCrBb,IAAMS,EAAcC,YAAH,KAUXC,EAAYC,YAAOC,IAAPD,CAAH,K,wBCDFE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCID,WAEb,OACE,oCACE,kBAACC,EAAA,EAAD,MACA,kBAACZ,EAAD,MACA,kBAACa,EAAA,EAAD,CAAe5B,MAAO6B,YAAoB7B,MACxC,kBAACiB,EAAD,CAAWa,WAAS,EAACC,UAAU,MAAMC,QAAQ,UAC3C,kBAACb,EAAA,EAAD,CAAMc,GAAG,mBAAmBC,MAAI,EAACC,GAAI,GAAIC,GAAI,IAC3C,kBAAC,EAAD,MACA,kBAAC,EAAD,YDdI,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.37dcca4f.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core\"\r\n\r\nconst defaultTheme = createMuiTheme()\r\n\r\nexport default createMuiTheme({ \r\n    ...defaultTheme,\r\n    palette: {\r\n        background:{\r\n            main: \"#bbdefb\"\r\n        },\r\n        primary: {\r\n            main: \"#8795e8\",\r\n            light: \"#bac5ff\",\r\n            dark: \"#5567b5\"\r\n        },\r\n        secondary: {\r\n            main: \"#c774e8\",\r\n            light: \"#fca5ff\",\r\n            dark: \"#9445b5\"\r\n        },\r\n    }\r\n})","import React, { Suspense, lazy} from 'react';\r\nimport {HashRouter, Switch, Route} from 'react-router-dom';\r\n\r\nconst home = lazy(() => import('./components/Home'))\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <Suspense fallback={<div></div>}>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={home} />\r\n            </Switch>\r\n        </Suspense>\r\n    </HashRouter>\r\n);","import React from 'react'\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst styles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport default function index() {\r\n    const classes = styles()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Krilow Photos\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n","import styled, { createGlobalStyle } from 'styled-components'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html, body {\r\n        height: 100%;\r\n    }\r\n\r\n    body{\r\n        background: linear-gradient(45deg, #C774E8 30%, #8795e8 90%);\r\n    }\r\n`\r\n\r\nexport const Container = styled(Grid)`\r\n    \r\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Router from '../routes'\r\nimport Bar from '../components/Bar'\r\n//styles\r\nimport {Container, GlobalStyle} from './styles'\r\nimport { ThemeProvider, responsiveFontSizes  } from '@material-ui/core/styles';\r\nimport theme from '../theme'\r\n\r\nexport default function UI(){\r\n\r\n  return (\r\n    <>\r\n      <CssBaseline/>\r\n      <GlobalStyle/> \r\n      <ThemeProvider theme={responsiveFontSizes(theme)}>\r\n        <Container container direction=\"row\" justify=\"center\">\r\n          <Grid id=\"center-container\" item xs={12} sm={10}>\r\n            <Bar/>\r\n            <Router/>\r\n          </Grid>\r\n        </Container>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}"],"sourceRoot":""}